#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2034,SC2154

########################################################################################

APP="LogCat"
VER="2.1.4"

########################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[0m"
CL_BOLD="\e[0;${BOLD};49m"
CL_UNLN="\e[0;${UNLN};49m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_YELLOW="\e[0;${YELLOW};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_DARK="\e[0;${DARK};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_YELLOW="\e[1;${YELLOW};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"

########################################################################################

SUPPORTED_ARGS="!ignore_errors grep egrep !follow head tail !headers 
 !no_colors !help !usage !version !ver"
SHORT_ARGS="f:!follow h:head t:tail H:!headers I:!ignore_errors g:grep G:egrep 
 nc:!no_colors v:!version h:!help"

########################################################################################

CONF="/etc/logcat.conf"

DEF_LINES=25
SEP_SYMBOL="-"

########################################################################################

main() {
  if [[ ! -t 1 || -n "$no_colors" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_BL_DARK
  fi

  [[ $version || $ver ]] && about && exit 0
  [[ $# -eq 0 || $usage || $help ]] && usage && exit 0

  [[ "$head" == "true" ]] && head=$DEF_LINES
  [[ "$tail" == "true" ]] && tail=$DEF_LINES

  readFiles "$@"
}

# Read all given files
#
# *: Paths to files
#
# Code: No
# Echo: No
readFiles() {
  local file path show_headers is_file_readed file_path is_root

  [[ $(id -u) -eq 0 ]] && is_root=true

  [[ $# -gt 1 && $headers ]] && show_headers=true

  for file in "$@" ; do
    [[ -d "$file" ]] && continue

    is_file_readed=""

    if [[ -z "$is_root" ]] || isReadableForAll "$file" ; then
      if [[ -r "$file" ]] ; then
        [[ -n "$show_headers" ]] && separator "$file"

        readFile "$file"

        is_file_readed=true
      fi
    else
      file_path=$(readlink -f "$file")

      while read -r path ; do
        if [[ $file_path =~ $path ]] ; then
          [[ $show_headers ]] && separator "$file"

          readFile "$file_path"
          is_file_readed=true

          break
        fi
      done < <(grep -Pv '^[ ]*(#(?!\!)|[ ]*$)' $CONF)
    fi

    if [[ ! $is_file_readed && ! $ignore_errors ]] ; then
      if [[ -z "$is_root" ]] ; then
        error "Can't read file ${CL_BL_RED}${file}${CL_RED} - file reading is not allowed. Forgot sudo prefix?" $RED
      else
        error "Can't read file ${CL_BL_RED}${file}${CL_RED} - file reading is not allowed" $RED
      fi
    fi
  done

  [[ $show_headers ]] && separator
}

# Read file
#
# 1: Path to file (String)
#
# Code: No
# Echo: No
readFile() {
  local file="$1"
  local app ext

  ext="${file//*\./}"

  if [[ "$ext" == "gz" ]] ; then
    if ! checkDeps "gzip" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - gzip is not installed" $RED
    else
      app="zcat"
    fi
  elif [[ "$ext" == "bz" ]] ; then
    if ! checkDeps "bzip2" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - zcat is not installed" $RED
    else
      app="bzcat"
    fi
  elif [[ "$ext" == "7z" ]] ; then
    if ! checkDeps "7zcat" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - 7zcat is not installed" $RED
    else
      app="7zcat"
    fi
  elif [[ "$ext" == "xz" ]] ; then
    if ! checkDeps "xz" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - xz is not installed" $RED
    else
      app="xzcat"
    fi
  elif [[ "$ext" == "lz" ]] ; then
    if ! checkDeps "xz" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - xz is not installed" $RED
    else
      app="lzcat"
    fi
  else
    app="cat"
  fi

  if [[ "$app" == "cat" && -n "$follow" ]] ; then
    tail -f "$file"
    exit 0
  elif [[ $head ]] ; then
    $app "$file" | head "-${head}"
  elif [[ $tail ]] ; then
    $app "$file" | tail "-${tail}"
  else
    if [[ $grep ]] ; then
      LC_ALL=C $app "$file" | grep "$grep"
    elif [[ $egrep ]]; then
      LC_ALL=C $app "$file" | grep "$egrep"
    else
      $app "$file"
    fi
  fi
}

# Print separator
#
# 1: Title (String) [Optional]
#
# Code: No
# Echo: No
separator() {
  local title="$1"

  local i sep cols

  cols=$(tput cols)

  for i in $(seq 1 "$cols") ; do
    sep="${sep}${SEP_SYMBOL}"
  done

  if [[ -n "$title" ]] ; then
    local adds=$(( cols - ${#title} - 4 ))
    show "\n${SEP_SYMBOL}${SEP_SYMBOL} $title ${sep:0:$adds}\n" $GREY
  else
    show "\n$sep\n" $GREY
  fi
}

# Check if file readable for all
#
# 1: File (String)
#
# Code: Yes
# Echo: No
isReadableForAll() {
  if [[ $(stat -c '%A' "$1" | cut -c8) == "r" ]] ; then
    return 0
  fi

  return 1
}

# Check required dependencies
#
# *: Required apps
#
# Code: No
# Echo: No
checkDeps() {
  for app in "$@" ; do
    type -P "$app" &> /dev/null
    [[ $? -eq 1 ]] && return 1
  done

  return 0
}

###############################################################################

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print error message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
error() {
  show "$@" 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} logcat ${CL_GREEN}{options}${CL_NORM} file..."
  show ""
  show "${CL_BOLD}Options${CL_NORM}"
  show ""
  if [[ -n "$DARK" ]] ; then
    show "  ${CL_GREEN}--follow, -f${CL_NORM} ${CL_DARK}.........${CL_NORM} Output appended data as the file grows"
    show "  ${CL_GREEN}--head, -h ${CL_GREY}num${CL_NORM} ${CL_DARK}.......${CL_NORM} Output the first part of files"
    show "  ${CL_GREEN}--tail, -t ${CL_GREY}num${CL_NORM} ${CL_DARK}.......${CL_NORM} Output the last part of files"
    show "  ${CL_GREEN}--grep, -g ${CL_GREY}text${CL_NORM} ${CL_DARK}......${CL_NORM} Filter output by grep"
    show "  ${CL_GREEN}--egrep, -G ${CL_GREY}pattern${CL_NORM} ${CL_DARK}..${CL_NORM} Filter output by egrep"
    show "  ${CL_GREEN}--headers, -H${CL_NORM} ${CL_DARK}........${CL_NORM} Show headers if more than 1 file"
    show "  ${CL_GREEN}--ignore-errors, -I${CL_NORM} ${CL_DARK}..${CL_NORM} Don't show error messages if file isn't readable or doesn't exist"
    show "  ${CL_GREEN}--help, -h${CL_NORM} ${CL_DARK}...........${CL_NORM} Show this help message"
    show "  ${CL_GREEN}--version, -v${CL_NORM} ${CL_DARK}........${CL_NORM} Show information about version"
  else
    show "  ${CL_GREEN}--follow, -f${CL_NORM}           Output appended data as the file grows"
    show "  ${CL_GREEN}--head, -h ${CL_GREY}num${CL_NORM}         Output the first part of files"
    show "  ${CL_GREEN}--tail, -t ${CL_GREY}num${CL_NORM}         Output the last part of files"
    show "  ${CL_GREEN}--grep, -g ${CL_GREY}text${CL_NORM}        Filter output by grep"
    show "  ${CL_GREEN}--egrep, -G ${CL_GREY}pattern${CL_NORM}    Filter output by egrep"
    show "  ${CL_GREEN}--headers, -H${CL_NORM}          Show headers if more than 1 file"
    show "  ${CL_GREEN}--ignore-errors, -I${CL_NORM}    Don't show error messages if file isn't readable or doesn't exist"
    show "  ${CL_GREEN}--help, -h${CL_NORM}             Show this help message"
    show "  ${CL_GREEN}--version, -v${CL_NORM}          Show information about version"
  fi
  show ""
  show "Examples" $BOLD
  show ""
  show "  logcat some-file.tar.gz"
  show "  Print some-file.tar.gz content" $DARK
  show ""
  show "  logcat -f some-file.log"
  show "  Output appended to some-file.log data as the file grows" $DARK
  show ""
  show "  logcat -g 'SOME_TEXT' -t 10 *.7z"
  show "  Read all 7z files, filter data by grep pattern and print only last 10 lines" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - Utility for controllable log viewing with sudo"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Essential Kaos Open Source License <https://essentialkaos.com/ekol>" $DARK
}

# Show warning message about unsupported argument
#
# 1: Argument name (String)
#
# Code: No
# Echo: No
showArgWarn() {
  error "Unknown argument $1" $RED
  exit 1
}

## ARGUMENTS PARSING 4 #################################################################

[[ $# -eq 0 ]] && main && exit $?

unset arg argn argm argv argt argk

argv="$*" ; argt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$argn" ]] ; then
    declare "$argn=$1"

    unset argn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    argm=${1:1}

    if [[ \ $SHORT_ARGS\  =~ \ $argm:!?([a-zA-Z0-9_]*) ]] ; then
      arg="${BASH_REMATCH[1]}"
    else
      declare -F showArgWarn &>/dev/null && showArgWarn "-$argm"
      shift && continue
    fi

    if [[ -z "$argn" ]] ; then
      argn=$arg
    else
      # shellcheck disable=SC2015
      [[ -z "$argk" ]] && ( declare -F showArgValWarn &>/dev/null && showArgValWarn "--$argn" ) || declare "$argn=true"
      argn=$arg
    fi

    if [[ ! $SUPPORTED_ARGS\  =~ !?$argn\  ]] ; then
      declare -F showArgWarn &>/dev/null && showArgWarn "-$argm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$argn=true" ; unset argn ; argk=true
    else
      unset argk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    arg=${1:2}

    if [[ $arg == *=* ]] ; then
      IFS="=" read -ra arg <<< "$arg"

      argm="${arg[0]}" ; argm=${argm//-/_}

      if [[ ! $SUPPORTED_ARGS\  =~ $argm\  ]] ; then
        declare -F showArgWarn &>/dev/null && showArgWarn "--${arg[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!argm}" && $MERGEABLE_ARGS\  =~ $argm\  ]] && declare "$argm=${!argm} ${arg[*]:1:99}" || declare "$argm=${arg[*]:1:99}"

      unset argm && shift && continue
    else
      arg=${arg//-/_}

      if [[ -z "$argn" ]] ; then
        argn=$arg
      else
        # shellcheck disable=SC2015
        [[ -z "$argk" ]] && ( declare -F showArgValWarn &>/dev/null && showArgValWarn "--$argn" ) || declare "$argn=true"
        argn=$arg
      fi

      if [[ ! $SUPPORTED_ARGS\  =~ !?$argn\  ]] ; then
        declare -F showArgWarn &>/dev/null && showArgWarn "--${argn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$argn=true" ; unset argn ; argk=true
      else
        unset argk
      fi

      shift && continue
    fi
  else
    if [[ -n "$argn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!argn}" && $MERGEABLE_ARGS\  =~ $argn\  ]] && declare "$argn=${!argn} $1" || declare "$argn=$1"

      unset argn && shift && continue
    fi
  fi

  argt="$argt $1" ; shift

done

[[ -n "$argn" ]] && declare "$argn=true"

unset arg argn argm argk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_ARGS" ]] && main $argv || main ${argt:1}

########################################################################################
