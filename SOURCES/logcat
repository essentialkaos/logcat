#!/usr/bin/env bash

################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

################################################################################

APP="LogCat"
VER="2.2.3"

################################################################################

NORM=0
BOLD=1
ITLC=3
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

# shellcheck disable=SC2034
CL_NORM="\e[${NORM}m"
# shellcheck disable=SC2034
CL_BOLD="\e[${BOLD}m"
# shellcheck disable=SC2034
CL_ITLC="\e[${ITLC}m"
# shellcheck disable=SC2034
CL_UNLN="\e[${UNLN}m"
# shellcheck disable=SC2034
CL_RED="\e[${RED}m"
# shellcheck disable=SC2034
CL_GREEN="\e[${GREEN}m"
# shellcheck disable=SC2034
CL_YELLOW="\e[${YELLOW}m"
# shellcheck disable=SC2034
CL_BLUE="\e[${BLUE}m"
# shellcheck disable=SC2034
CL_MAG="\e[${MAG}m"
# shellcheck disable=SC2034
CL_CYAN="\e[${CYAN}m"
# shellcheck disable=SC2034
CL_GREY="\e[${GREY}m"
# shellcheck disable=SC2034
CL_DARK="\e[${DARK}m"
# shellcheck disable=SC2034
CL_BL_RED="\e[${BOLD};${RED}m"
# shellcheck disable=SC2034
CL_BL_GREEN="\e[${BOLD};${GREEN}m"
# shellcheck disable=SC2034
CL_BL_YELLOW="\e[${BOLD};${YELLOW}m"
# shellcheck disable=SC2034
CL_BL_BLUE="\e[${BOLD};${BLUE}m"
# shellcheck disable=SC2034
CL_BL_MAG="\e[${BOLD};${MAG}m"
# shellcheck disable=SC2034
CL_BL_CYAN="\e[${BOLD};${CYAN}m"
# shellcheck disable=SC2034
CL_BL_GREY="\e[${BOLD};${GREY}m"
# shellcheck disable=SC2034
CL_IT_DARK="\e[${ITLC};${DARK}m"

################################################################################

SUPPORTED_OPTS="!ignore_errors grep egrep !follow head tail !headers 
 !no_color !help !version"
SHORT_OPTS="f:!follow h:head t:tail H:!headers I:!ignore_errors g:grep G:egrep 
 nc:!no_color v:!version"

################################################################################

# Path to configuration file (String)
CONFIG="/etc/logcat.conf"

# Default number of lines for tail/head (Number)
DEFAULT_LINES=25

################################################################################

main() {
  if [[ -n "$no_color" || -n "$NO_COLOR" ]] || [[ ! -c /dev/stdout && -z $FAKETTY ]] ; then
    unset NORM BOLD CL_ITLC UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_IT_DARK
    no_color=true
  fi

  if [[ -n "$version" ]] ; then
    about
    exit 0
  fi

  if [[ -n "$help" || $# -eq 0 ]] ; then
    usage
    exit 0
  fi

  [[ "$head" == "true" ]] && head=$DEFAULT_LINES
  [[ "$tail" == "true" ]] && tail=$DEFAULT_LINES

  readFiles "$@"

  exit $?
}

# Read all given files
#
# *: Paths to files
#
# Code: Yes
# Echo: No
readFiles() {
  local file path show_headers is_file_read
  local file_path is_root has_errors

  if [[ $(id -u) -eq 0 ]] ; then
    is_root=true
  fi

  if [[ $# -gt 1 && -n "$headers" ]] ; then
    show_headers=true
  fi

  for file in "$@" ; do
    if [[ -d "$file" ]] ; then
      continue
    fi

    is_file_read=""

    if [[ -z "$is_root" ]] || isReadableForAll "$file" ; then
      if [[ -r "$file" ]] ; then
        if [[ -n "$show_headers" ]] ; then
          separator "$file"
        fi

        if ! readFile "$file" ; then
          has_errors=true
        fi

        is_file_read=true
      fi
    else
      file_path=$(readlink -f "$file")

      while read -r path ; do
        if [[ $file_path =~ $path ]] ; then
          if [[ -n "$show_headers" ]] ; then
            separator "$file"
          fi

          if ! readFile "$file_path" ; then
            has_errors=true
          fi

          is_file_read=true

          break
        fi
      done < <(grep -Pv '^[ ]*(#(?!\!)|[ ]*$)' $CONFIG)
    fi

    if [[ -z "$is_file_read" && -z "$ignore_errors" ]] ; then
      if [[ -z "$is_root" ]] ; then
        error "Can't read file ${CL_BL_RED}${file}${CL_RED} - file reading is not allowed. Forgot sudo prefix?" $RED
        has_errors=true
      else
        error "Can't read file ${CL_BL_RED}${file}${CL_RED} - file reading is not allowed" $RED
        has_errors=true
      fi
    fi
  done

  if [[ -n "$show_headers" ]] ; then
    separator
  fi

  if [[ -n "$has_errors" ]] ; then
    return 1
  fi

  return 0
}

# Read file
#
# 1: Path to file (String)
#
# Code: No
# Echo: No
readFile() {
  local file="$1"

  local app="cat"
  local ext="${file//*\./}"

  if [[ "$ext" == "gz" ]] ; then
    if ! hasApp "gzip" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - gzip is not installed" $RED
      return 1
    else
      app="zcat"
    fi
  elif [[ "$ext" == "bz" ]] ; then
    if ! hasApp "bzip2" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - zcat is not installed" $RED
      return 1
    else
      app="bzcat"
    fi
  elif [[ "$ext" == "7z" ]] ; then
    if ! hasApp "7zcat" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - 7zcat is not installed" $RED
      return 1
    else
      app="7zcat"
    fi
  elif [[ "$ext" == "xz" ]] ; then
    if ! hasApp "xz" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - xz is not installed" $RED
      return 1
    else
      app="xzcat"
    fi
  elif [[ "$ext" == "lz" ]] ; then
    if ! hasApp "xz" ; then
      error "Can't read file ${CL_BL_RED}${file}${CL_RED} - xz is not installed" $RED
      return 1
    else
      app="lzcat"
    fi
  fi

  if [[ "$app" == "cat" && -n "$follow" ]] ; then
    tail -f "$file"
    return $?
  elif [[ -n "$head" ]] ; then
    $app "$file" | head "-${head}"
    return $?
  elif [[ -n "$tail" ]] ; then
    $app "$file" | tail "-${tail}"
    return $?
  else
    if [[ -n "$grep" ]] ; then
      LC_ALL=C $app "$file" | grep "$grep"
      return $?
    elif [[ -n "$egrep" ]]; then
      LC_ALL=C $app "$file" | grep "$egrep"
      return $?
    else
      $app "$file"
      return $?
    fi
  fi
}

# Print separator
#
# 1: Title (String) [Optional]
#
# Code: No
# Echo: No
separator() {
  local title="$1"
  local win_width i sep

  win_width=$(stty size 2>/dev/null | cut -f2 -d' ')
  win_width="${win_width:-88}"

  if [[ -n "$title" ]] ; then
    win_width=$(( win_width - (${#title} + 4) ))
    sep="-- ${CL_BOLD}$title${CL_GREY} "
  fi

  # shellcheck disable=SC2034
  for i in $(seq 1 "$win_width") ; do
    sep="${sep}-"
  done

  show "\n${sep}\n" $GREY
}

# Check if file readable for all
#
# 1: File (String)
#
# Code: Yes
# Echo: No
isReadableForAll() {
  if [[ $(stat -c '%A' "$1" | cut -c8) == "r" ]] ; then
    return 0
  fi

  return 1
}

# Check if given app is installed
#
# 1: Binary name (String)
#
# Code: Yes
# Echo: No
hasApp() {
  if ! type -P "$1" &> /dev/null ; then
    return 1
  fi

  return 0
}

################################################################################

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_color" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print formatted message with option info
#
# 1: Option (String)
# 2: Description (String)
# 3: Arguments (String) [Optional]
#
# Code: No
# Echo: No
showo() {
  local optn optd optp optt optf breadcrumbs

  optn="$1"
  optd="$2"
  optp="$3"

  if [[ -n "$DARK" ]] ; then
    breadcrumbs="............................"
  else
    breadcrumbs="                            "
  fi

  if [[ -z "$optp" ]] ; then
    optt="$optn"
    optf=$(( 21 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  else
    optt="$optn $optp"
    optf=$(( 21 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_GREY}${optp}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  fi
}

# Print error message
#
# 1: Message (String)
#
# Code: No
# Echo: No
error() {
  show "▲ $*" $RED 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} logcat ${CL_GREEN}{options}${CL_NORM} file…"
  show ""
  show "${CL_BOLD}Options${CL_NORM}"
  show ""
  showo "--follow, -f" "Output appended data as the file grows"
  showo "--head, -h" "Output the first part of files" "lines"
  showo "--tail, -t" "Output the last part of files" "lines"
  showo "--grep, -g" "Filter output by grep" "text"
  showo "--egrep, -G" "Filter output by egrep" "pattern"
  showo "--headers, -H" "Show headers if more than 1 file are given"
  showo "--no-color, -nc" "Disable colors in output"
  showo "--help, -h" "Show this help message"
  showo "--version, -v" "Show information about version"
  show ""
  show "Examples" $BOLD
  show ""
  show "  logcat some-file.tar.gz"
  show "  Print some-file.tar.gz content" $DARK
  show ""
  show "  logcat -f some-file.log"
  show "  Output appended to some-file.log data as the file grows" $DARK
  show ""
  show "  logcat -g 'SOME_TEXT' -t 10 *.7z"
  show "  Read all 7z files, filter data by grep pattern and print only last 10 lines" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - Utility for controllable log viewing with sudo"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Show warning message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Unknown option $1"
  exit 1
}

## OPTIONS PARSING 6 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
  exit $?
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=()

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt+=("$1") ; shift
done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main "${optt[@]}"

################################################################################
